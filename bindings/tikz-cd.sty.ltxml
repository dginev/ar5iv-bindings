# -*- CPERL -*-
# /=====================================================================\ #
# |  tikz-cd.sty                                                        | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #

package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

RequirePackage('tikz');

#**********************************************************************

Warn('missing_file', 'tikz-cd.sty', $STATE->getStomach->getGullet, 'tikz-cd.sty is not implemented and will not be interpreted raw.');

#**********************************************************************

# Forbid loading this package, even locally, until we get good enough at
# reusing the internals for good SVG
#InputDefinitions('tikz-cd', type => 'sty', noltxml => 1);

our %discarded_env_error_report = ();

sub discard_env_body {
  my ($stomach, $kind) = @_;
  my $gullet = $stomach->getGullet;
  $stomach->bgroup;
  if (!$discarded_env_error_report{$kind}) {
    $discarded_env_error_report{$kind} = 1;
    Error('undefined', '{' . $kind . '}', $gullet,
      $kind . ' has no support in tikzcd.sty.ltxml, this is a stub binding.'); }
  # discard contents;
  while (my $upto_end = $gullet->readUntil(T_CS('\end'))) {
    my $drop_open = $gullet->readToken;
    my $env       = $gullet->readBalanced;
    last if ToString($env) eq $kind; }
  $stomach->egroup;
  return; }

DefConstructorI(T_CS('\begin{tikzcd}'), undef, '<ltx:ERROR>{tikzcd}</ltx:ERROR>',
  beforeDigest => sub { discard_env_body($_[0], 'tikzcd') },
  mode         => 'text',
  locked       => 1);
DefMacro('\endtikzcd', '\relax');

DefConstructorI(T_CS('\begin{tikzpicture}'), undef, '<ltx:ERROR>{tikzpicture}</ltx:ERROR>',
  beforeDigest => sub { discard_env_body($_[0], 'tikzpicture') },
  mode         => 'text',
  locked       => 1);
DefMacro('\endtikzpicture', '\relax');

#**********************************************************************

1;
